Comandos de configuración...
git --help // saca la ayuda
git ls // carpetas y archivos en el directorio actual
git ls -a // lo mismo iuncluyendo los ocultos, como la carpeta .git
cd [nombreSubCarpeta ó directorio completo] // ubica el Git Bash en ese directorio
cd .. // sube un nivel en el árbol de directorios
EN EL DIRECTORIO DEL PROYECTO:
git init // genera la carpeta .git
code . // abre el proyecto en VSCode con funcionalidades Git (me da el status en "online")
git rm [nombreArchivo] // es como un rm + add:
	rm [nombreArchivo] y después add [nombreArchivo] // borra el archivo pero a falta de explicar el cambio (commit)
	git add [.(todos los archivos del proyecto)]/[nombreArchivo]/[.extension (todos los archivos con esa extensión] // hace un commit de estos elementos a la etapa "stage" (cambios temporales a falta de ser comentados)
git status // devuelve el estado Git de los archivos del proyecto
git commit -m "Commit inicial"
git commit // esto nos abrirá VSCode y nos obligará a explicar los cambios realizados (tiene que haber algún add/rm de por medio para que detecte el cambio)
git restore --staged [nombreArchivo] // saca el archivo de la etapa "stage"
git restore [nombreArchivo] // descarta los cambios temporales sobre ese archivo en la etapa "stage"
git mv [nombreArchivoOriginal] [nombreArchivoFinal] // es como un mv + add:
	mv [nombreArchivoOriginal] [nombreArchivoFinal] // para cambiar el nombre
	git add [nombreArchivoOriginal] [nombreArchivoFinal] // pasa la operación cambio de nombre a la etapa "stage"
git commit -m "renombrando archivo"
git status -s // versión compacta de status donde muestra los archivos insertados, borrados o modificados y si están en la etapa "staged". Una vez comprometidos (commit), estos desaparecerían
git diff // muestra los cambios en los diferentes archivos
git diff --staged // muestra los cambios en los archivos de la etapa "staged", sólo los que tenemos intención de comprometer, no todos
archivo [env] // para variables de entorno (que son comunes, como credenciales de BBDD)
archivo .gitignore // los archivos que listemos aquí deberían ser ignorados por Git, porque no queremos que sean públicos
branch y merge // para cuando hay varios desarrolladores que pueden estar introduciendo cambios en paralelo y después juntando las ramas (estas ramas pueden ser features, tickets de fallos, etc):
git branch // muestra el listado de ramas y en la que nos encontramos
git checkout -b [nombreNuevaRama] // genera una nueva rama
... hacemos los cambios en ramab ...
git log // muestra el histórico de versiones con sus respectivos usuarios, ramas, fechas, etc.
git log --oneline // muestra el histórico de versiones compacto con las ramas
Desde la rama "main" (para eso git branch, nos debe devolver "main"):
git merge ramab // trae los cambios en los archivos de la ramab a la rama main
git remote add origin https://github.com/adrianiri/Trivial.git apunta el proyecto a nuestro repositorio en GitHub (creado previamente y llamado "Trivial")
git push -u origin main // -u crea la rama; origin: desde donde; main: nombre; después lo lanza (creo que la rama main)
... después estas ramas están disponibles en GitHub en el icono que está en la parte superior izquierda ...
git push --set-upstream origin main // esta lo publica en la web: https://adrianiri.github.io/TrivialWeb